package com.cg.springbatch;

import java.util.*;
import java.io.*;
import java.nio.channels.FileChannel;
import java.nio.channels.FileLock;
import java.nio.file.*;
import java.text.SimpleDateFormat;
import java.util.zip.*;
import org.springframework.batch.item.ItemProcessor;
import com.cg.springbatch.model.EmployeeDetails;

public class EmployeeDetailsItemProcessor implements ItemProcessor<EmployeeDetails, EmployeeDetails> {

	@SuppressWarnings({ "resource", "unused" })
	@Override
	public EmployeeDetails process(EmployeeDetails employeeDetails) throws Exception {
		int count=0;
		FileLock fl=null;
		BufferedWriter bufferWriter = null;
		FileWriter fileWriter = null;		
		String pattern = "yyyy-MM-dd";
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat(pattern);
		String date = simpleDateFormat.format(new Date());
		String fileName =  "D:/results" + "Employee" + ".zip";
		FileOutputStream fos = new FileOutputStream(fileName);
		ZipOutputStream zipOS = new ZipOutputStream(fos);
		

		 File directory = new File("D:/");
	        //get all the files from a directory
	        File[] fList = directory.listFiles();
	       String sss=".zip";
	            if (fList.toString().contains(sss)){
	                System.out.println("yes ");
	            } 
	            else
	            {
	            	System.out.println("no");
	            }
	      	      
		
		
		int id = employeeDetails.getId();
	 File employeeFile = new File("D:/results/employeeDetails" + id + ".txt");
		if (!employeeFile.exists())
		{
			employeeFile.createNewFile();
		}
		// If exists
		fileWriter = new FileWriter(employeeFile.getAbsoluteFile(), true);

		bufferWriter = new BufferedWriter(fileWriter);

		String employeeResults = employeeDetails.toString();

		byte[] bytes = Files.readAllBytes(Paths.get("D:/results/employeeDetails" + id + ".txt"));

		String s = new String(bytes);

		// Check if the name is contained
		if (s.indexOf(employeeResults) != -1)
		{
			System.out.println("Name already present!");

		}
		else 
		{
			bufferWriter.write("\n");
			bufferWriter.write(employeeResults);
			bufferWriter.close();
			System.out.println(employeeDetails);
		}
		// Doesnt Exists
		File folder = new File("D:/results");
		File[] listOfFiles = folder.listFiles();
		for (int i = 0; i < listOfFiles.length; i++) {
			if (listOfFiles[i].isFile())
			{
				FileInputStream fileInputStream = new FileInputStream(listOfFiles[i].toString());
				ZipEntry zipEntry = new ZipEntry(listOfFiles[i].toString());
				zipOS.putNextEntry(zipEntry);
				byte[] by = new byte[1024];
				int length;
				while ((length = fileInputStream.read(by)) >= 0) 
				{
					zipOS.write(by, 0, length);
				}
				zipOS.closeEntry();
				fileInputStream.close();
			}
		}
		return employeeDetails;
	}
}
